# ワークフローの名前
name: .NET WPF Release

# ワークフローが実行されるタイミングを定義
on:
  push:
    tags:
      - 'v*.*.*'

  workflow_dispatch:

# 実行される一連のタスク（ジョブ）を定義
jobs:
  build-and-release:
    # ジョブの名前
    name: Build and Release
    # 実行環境を指定。WPFはWindowsが必須
    runs-on: windows-latest

    # GitHubリリースを作成・編集するために、リポジトリのコンテンツへの書き込み権限を付与します。
    permissions:
      contents: write

    steps:
      # 1. リポジトリのソースコードをチェックアウトする
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. .NET SDKをセットアップする
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          # プロジェクトで使用している.NETのバージョンを指定
          dotnet-version: '8.0.x'

      # 3a. 【単一ファイル版】プロジェクトを発行（publish）する
      - name: Publish Standalone Project
        run: dotnet publish --configuration Release --runtime win-x64 --self-contained true -p:PublishSingleFile=true -o ./publish-standalone ClipboardUtility/ClipboardUtility.csproj
        # --configuration Release: リリースモードでビルド
        # --runtime win-x64: 64bitのWindows向けにビルド
        # --self-contained true: .NETがインストールされていなくても動くように自己完結型でビルド
        # -p:PublishSingleFile=true: 関連ファイルを含んだ単一の.exeファイルとして出力
        # -o ./publish-standalone: 'publish-standalone'という名前のフォルダに出力

      # 3b. 【ClickOnce版】プロジェクトを発行（publish）する
      - name: Publish ClickOnce Installer
        run: |
          # タグ名 'v1.2.3' から先頭の 'v' を削除
          $version = "${{ github.ref_name }}".Substring(1)

          # ClickOnceは4つのセグメントを持つバージョン番号(例: 1.2.3.0)を要求するため、末尾に'.0'を追加
          $clickonce_version = $version + '.0'
          
          Write-Host "Tag is ${{ github.ref_name }}, setting ClickOnce ApplicationVersion to $clickonce_version"

          dotnet publish --configuration Release --runtime win-x64 `
            -p:PublishProtocol=ClickOnce `
            -p:ApplicationVersion=$clickonce_version `
            -p:GenerateManifests=True `
            -o ./publish-clickonce `
            ClipboardUtility/ClipboardUtility.csproj

      # 4. README.mdを単一ファイル版のpublishディレクトリにコピーする
      - name: Copy README to standalone publish folder
        run: Copy-Item -Path ./README* -Destination ./publish-standalone/

      # 5a. 【単一ファイル版】発行された成果物をZIPファイルに圧縮する
      - name: Zip the standalone artifacts
        run: Compress-Archive -Path ./publish-standalone/* -DestinationPath ClipboardUtility-Standalone-${{ github.ref_name }}.zip

      # 5b. 【ClickOnce版】発行された成果物をZIPファイルに圧縮する
      - name: Zip the ClickOnce installer
        run: Compress-Archive -Path ./publish-clickonce/* -DestinationPath ClipboardUtility-ClickOnce-Installer-${{ github.ref_name }}.zip

      # 6. GitHubリリースを作成する
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # トークンは自動で設定されます
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 7a. 【単一ファイル版】ZIPファイルをリリースにアップロードする
      - name: Upload Standalone Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ClipboardUtility-Standalone-${{ github.ref_name }}.zip
          asset_name: ClipboardUtility-Standalone-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      # 7b. 【ClickOnce版】ZIPファイルをリリースにアップロードする
      - name: Upload ClickOnce Installer Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ClipboardUtility-ClickOnce-Installer-${{ github.ref_name }}.zip
          asset_name: ClipboardUtility-ClickOnce-Installer-${{ github.ref_name }}.zip
          asset_content_type: application/zip
